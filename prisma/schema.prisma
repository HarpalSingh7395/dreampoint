datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phoneNumber   String?
  address       String?
  role          Role      @default(STUDENT)
  age           Int?
  city          String?
  state         String?
  zipCode       String?
  qualification String?
  institution   String?
  currentGrade  String?
  profileStatus ProfileStatus @default(INCOMPLETE)
  bio           String?
  experience    Int?      // Teaching experience in years
  hourlyRate    Int?      // Hourly rate in INR
  specialization String?
  
  // Arrays stored as comma-separated strings
  subjects      String?   // Comma-separated subjects
  teachingGrades String?  // Comma-separated grades for teachers
  availability  String?   // Comma-separated days of availability

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  documents     Document[]
}

enum Role {
  SUPER_ADMIN
  ADMIN
  TEACHER
  STUDENT
}

enum ProfileStatus {
  INCOMPLETE
  PENDING_APPROVAL
  APPROVED
  REJECTED
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Document {
  id        String   @id @default(cuid())
  userId    String
  name      String
  path      String   // Appwrite bucket ID
  fileId    String   // Appwrite file ID
  mimeType  String?
  size      Int?     // Optional: size in bytes
  type      String   // Type of document (e.g., "ID_PROOF", "EDUCATION_CERT", etc.)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}