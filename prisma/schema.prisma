// === Prisma Configuration ===
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// === Enums ===

enum Role {
  SUPER_ADMIN
  ADMIN
  TEACHER
  STUDENT
  BASE_USER
}

enum ProfileStatus {
  INCOMPLETE
  PENDING_APPROVAL
  APPROVED
  REJECTED
}

enum DocumentType {
  GOVERNMENT_ID
  EDUCATION_CERT  
  RESUME
  EXPERIENCE_CERT
  POLICE_VERIFICATION
  STUDENT_ID
  REPORT_CARD
  PARENT_ID
  PROFILE_PICTURE
}

enum CourseType {
  PERSONAL
  GROUP
}

enum Weekday {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum ClassStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// === Models ===

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phoneNumber   String?
  address       String?
  role          Role      @default(BASE_USER)
  age           Int?
  city          String?
  state         String?
  zipCode       String?
  qualification String?
  extraQualifications Json? 
  institution   String?
  currentGrade  String?
  profileStatus ProfileStatus @default(INCOMPLETE)
  bio           String?
  experience    Int?      // Teaching experience in years
  hourlyRate    Int?      // Hourly rate in INR
  specialization String?
  deletedAt     DateTime?

  subjects        String?   // Comma-separated subjects
  teachingGrades  String?   // Comma-separated grades for teachers
  availability    String?   // Comma-separated days of availability

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  accounts        Account[]
  sessions        Session[]
  Authenticator   Authenticator[]
  documents       Document[]
  enrollments     Enrollment[]
  coursesTeaching Course[]     @relation("MainTeacher")
  spareClasses    Class[]      @relation("ClassTeacher")
  feedbackGiven   Feedback[]   @relation("FeedbackAuthor")
  feedbackReceived Feedback[]  @relation("FeedbackReceiver")

  Payment Payment[]

  RescheduleRequest RescheduleRequest[]

  Attendance Attendance[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Document {
  id        String       @id @default(cuid())
  userId    String
  name      String
  path      String
  fileId    String
  mimeType  String?
  size      Int?
  type      DocumentType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Course {
  id           String        @id @default(cuid())
  title        String
  description  String?
  type         CourseType
  startDate    DateTime
  endDate      DateTime
  teacherId    String
  teacher      User          @relation("MainTeacher", fields: [teacherId], references: [id])
  schedule     Schedule[]
  enrollments  Enrollment[]
  classes      Class[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Schedule {
  id        String    @id @default(cuid())
  courseId  String
  dayOfWeek Weekday
  startTime String
  endTime   String

  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id         String    @id @default(cuid())
  studentId  String
  courseId   String

  student    User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course     Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Class {
  id               String      @id @default(cuid())
  courseId         String
  date             DateTime
  startTime        String
  endTime          String
  status           ClassStatus @default(SCHEDULED)
  teacherId        String?
  replacementFor   String?
  cancellationReason String?

  course           Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teacher          User?       @relation("ClassTeacher", fields: [teacherId], references: [id])
  attendances      Attendance[]
  payments         Payment[]
  rescheduleRequests RescheduleRequest[]
}

model Attendance {
  id        String           @id @default(cuid())
  classId   String
  studentId String
  status    AttendanceStatus
  remarks   String?

  class     Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
  student   User             @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([classId, studentId])
}

model Feedback {
  id           String   @id @default(cuid())
  fromUserId   String
  toUserId     String
  rating       Int      // 1â€“5 stars
  comment      String?
  createdAt    DateTime @default(now())

  author       User     @relation("FeedbackAuthor", fields: [fromUserId], references: [id], onDelete: Cascade)
  receiver     User     @relation("FeedbackReceiver", fields: [toUserId], references: [id], onDelete: Cascade)
}

model Payment {
  id           String       @id @default(cuid())
  classId      String
  studentId    String
  amount       Int          // in paisa
  status       PaymentStatus @default(PENDING)
  paidAt       DateTime?
  transactionId String?

  class        Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  student      User         @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model RescheduleRequest {
  id           String     @id @default(cuid())
  classId      String
  requestedBy  String
  newDate      DateTime
  newStartTime String
  newEndTime   String
  reason       String
  status       String     @default("PENDING") // Or make enum if needed
  createdAt    DateTime   @default(now())

  class        Class      @relation(fields: [classId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [requestedBy], references: [id], onDelete: Cascade)
}
